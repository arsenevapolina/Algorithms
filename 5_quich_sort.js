/*
 Быстрая сортировка или сортировка Хоара - один из самых эффективных алгоритмов сортировки

 Алгоритм работает по принципу "разделяй и властвуй":

 суть в том, что мы делим массив на подмассивы и каждый раз рекурсивно мы выбираем 
 опорный элемент у каждого массива.
 Его можно выбрать случайно, но чаще всего берется центральный элемент.

 Продвигаемся по массиву и все элементы, к-е по значению меньше, чем опорный, 
 добавляем в один массив. Все, к-е больше, добавляем в другой массив.

 После такой итерации у нас образуется два массива: с меньшими и с большими числами, чем опорный элемент.

 Далее такая операция выполняется для каждого из этих массивов: в каждом из подмассивов выбирается опорный элемент,
 происходит сортировка.  

 Все это повторяется до тех пор, пока длина массива не станет равна единице - 
 именно это условие и будет базовым случаем выхода из рекурсии.

 После всех этих итерацией "маленькие" отсортированные подмассивы "склеиваются" в один большой.
 */

const arr = [
  0, 3, 2, 5, 6, 8, 23, 9, 4, 2, 1, 2, 9, 6, 4, 1, 7, -1, -5, 23, 6, 2, 35, 6,
  3, 32, 9, 4, 2, 1, 2, 9, 6, 4, 1, 7, -1, -5, 23, 9, 4, 2, 1, 2, 9, 6, 4, 1, 7,
  -1, -5, 23,
];
let count = 0;

function quickSort(array) {
  if (array.length <= 1) {
    return array;
    // условие, базовый случай, при к-м рекурсия будет заканчиваться: если длина массива <= 1 - возвращаем массив
  }
  let pivotIndex = Math.floor(array.length / 2);
  // центральный опорный элемент (хотя можно выбрать любой)
  let pivot = array[pivotIndex];
  // обращаясь по индексу, получаем сам опорный элемент, к-й высчитали
  let less = [];
  // в данный массив мохраняем числа, к-е меньше, чем опорные
  let greater = [];
  // к-е больше 
  for (let i = 0; i < array.length; i++) {
    // проходимся по всему массиву, сравнивая каждый элемент с опорным 
    count += 1;
    if (i === pivotIndex) continue;
    // сравнение интдекса текущей итерации с индексом опорной точки (если =, то пропускаем итерацию - continue)
    if (array[i] < pivot) {
      less.push(array[i]);
      // добавляем число меньше опорного в массив
    } else {
      greater.push(array[i]);
    }
  }
  return [...quickSort(less), pivot, ...quickSort(greater)];
  // получаем два массива с числами больше и меньше опорного 
}

console.log(quickSort(arr));
// получаем отсортированный массив по возрастанию 
console.log("count", count);
// 308 итераций 